pluto_tile_parallel:
0.0011851400



default tvm:
Execution time of this operator: max:0.0029078439 ns   median:0.0022267533 ns   min:0.0022159728 ns



Execution time of this operator: max:0.0000516756 s   median:0.0000512731 s   min:0.0000500424 s
Equivalent python schedule:
x1_i, x1_j = tuple(x1.op.axis) + tuple(x1.op.reduce_axis)
x2_i, x2_k = tuple(x2.op.axis) + tuple(x2.op.reduce_axis)
x2_i_o_i, x2_i_i = s[x2].split(x2_i, factor=16)
x2_i_o_o_i, x2_i_o_i = s[x2].split(x2_i_o_i, factor=1)
x2_i_o_o_o, x2_i_o_o_i = s[x2].split(x2_i_o_o_i, factor=4)
x2_k_o, x2_k_i = s[x2].split(x2_k, factor=64)
s[x2].reorder(x2_i_o_o_o, x2_i_o_o_i, x2_k_o, x2_i_o_i, x2_k_i, x2_i_i)
x1_local, = s.cache_write([x1], "local")
x1_local_i_c, x1_local_j = tuple(x1_local.op.axis) + tuple(x1_local.op.reduce_axis)
x1_local_i_c_o_i, x1_local_i_c_i = s[x1_local].split(x1_local_i_c, factor=8)
x1_local_i_c_o_o_i, x1_local_i_c_o_i = s[x1_local].split(x1_local_i_c_o_i, factor=1)
x1_local_i_c_o_o_o, x1_local_i_c_o_o_i = s[x1_local].split(x1_local_i_c_o_o_i, factor=1)
x1_local_j_o, x1_local_j_i = s[x1_local].split(x1_local_j, factor=1)
s[x1_local].reorder(x1_local_i_c_o_o_o, x1_local_i_c_o_o_i, x1_local_j_o, x1_local_i_c_o_i, x1_local_j_i, x1_local_i_c_i)
x1_i_o, x1_i_i = s[x1].split(x1_i, factor=8)
s[x1].reorder(x1_i_o, x1_i_i)
s[x1_local].compute_at(s[x1], x1_i_o)
s[x1].parallel(x1_i_o)
x2_i_o_o_o_i_o_o_i_fused = s[x2].fuse(x2_i_o_o_o, x2_i_o_o_i)
s[x2].parallel(x2_i_o_o_o_i_o_o_i_fused)
s[x1_local].pragma(x1_local_i_c_o_o_o, "auto_unroll_max_step", 16)
s[x1_local].pragma(x1_local_i_c_o_o_o, "unroll_explicit", True)
s[x2].pragma(x2_i_o_o_o_i_o_o_i_fused, "auto_unroll_max_step", 64)
s[x2].pragma(x2_i_o_o_o_i_o_o_i_fused, "unroll_explicit", True)
s[x1_local].vectorize(x1_local_i_c_i)
s[x1].vectorize(x1_i_i)
s[x2].vectorize(x2_i_i)


ppcg cuda:0.0000815360

gpu ansor:
Execution time of this operator: max:0.0000480152 s   median:0.0000472633 s   min:0.0000471608 s
Equivalent python schedule:
x1_i, x1_j = tuple(x1.op.axis) + tuple(x1.op.reduce_axis)
x2_i, x2_k = tuple(x2.op.axis) + tuple(x2.op.reduce_axis)
x2_local, = s.cache_write([x2], "local")
x2_local_i_c, x2_local_k = tuple(x2_local.op.axis) + tuple(x2_local.op.reduce_axis)
x2_local_i_c_o_i, x2_local_i_c_i = s[x2_local].split(x2_local_i_c, factor=2)
x2_local_i_c_o_o_i, x2_local_i_c_o_i = s[x2_local].split(x2_local_i_c_o_i, factor=1)
x2_local_i_c_o_o_o_i, x2_local_i_c_o_o_i = s[x2_local].split(x2_local_i_c_o_o_i, factor=64)
x2_local_i_c_o_o_o_o, x2_local_i_c_o_o_o_i = s[x2_local].split(x2_local_i_c_o_o_o_i, factor=1)
x2_local_k_o_i, x2_local_k_i = s[x2_local].split(x2_local_k, factor=2)
x2_local_k_o_o, x2_local_k_o_i = s[x2_local].split(x2_local_k_o_i, factor=32)
s[x2_local].reorder(x2_local_i_c_o_o_o_o, x2_local_i_c_o_o_o_i, x2_local_i_c_o_o_i, x2_local_k_o_o, x2_local_k_o_i, x2_local_i_c_o_i, x2_local_k_i, x2_local_i_c_i)
x2_i_o_i, x2_i_i = s[x2].split(x2_i, factor=2)
x2_i_o_o_i, x2_i_o_i = s[x2].split(x2_i_o_i, factor=64)
x2_i_o_o_o, x2_i_o_o_i = s[x2].split(x2_i_o_o_i, factor=1)
s[x2].reorder(x2_i_o_o_o, x2_i_o_o_i, x2_i_o_i, x2_i_i)
s[x2_local].compute_at(s[x2], x2_i_o_i)
y_2_shared = s.cache_read(y_2, "shared", [x2_local])
y_2_shared_ax0 = tuple(y_2_shared.op.axis)
s[y_2_shared].compute_at(s[x2_local], x2_local_k_o_o)
x1_local, = s.cache_write([x1], "local")
x1_local_i_c, x1_local_j = tuple(x1_local.op.axis) + tuple(x1_local.op.reduce_axis)
x1_local_i_c_o_i, x1_local_i_c_i = s[x1_local].split(x1_local_i_c, factor=1)
x1_local_i_c_o_o_i, x1_local_i_c_o_i = s[x1_local].split(x1_local_i_c_o_i, factor=1)
x1_local_i_c_o_o_o_i, x1_local_i_c_o_o_i = s[x1_local].split(x1_local_i_c_o_o_i, factor=64)
x1_local_i_c_o_o_o_o, x1_local_i_c_o_o_o_i = s[x1_local].split(x1_local_i_c_o_o_o_i, factor=1)
x1_local_j_o_i, x1_local_j_i = s[x1_local].split(x1_local_j, factor=64)
x1_local_j_o_o, x1_local_j_o_i = s[x1_local].split(x1_local_j_o_i, factor=1)
s[x1_local].reorder(x1_local_i_c_o_o_o_o, x1_local_i_c_o_o_o_i, x1_local_i_c_o_o_i, x1_local_j_o_o, x1_local_j_o_i, x1_local_i_c_o_i, x1_local_j_i, x1_local_i_c_i)
x1_i_o_i, x1_i_i = s[x1].split(x1_i, factor=1)
x1_i_o_o_i, x1_i_o_i = s[x1].split(x1_i_o_i, factor=64)
x1_i_o_o_o, x1_i_o_o_i = s[x1].split(x1_i_o_o_i, factor=1)
s[x1].reorder(x1_i_o_o_o, x1_i_o_o_i, x1_i_o_i, x1_i_i)
s[x1_local].compute_at(s[x1], x1_i_o_i)
y_1_shared = s.cache_read(y_1, "shared", [x1_local])
y_1_shared_ax0 = tuple(y_1_shared.op.axis)
s[y_1_shared].compute_at(s[x1_local], x1_local_j_o_o)
A_shared = s.cache_read(A, "shared", [x1_local])
A_shared_ax0, A_shared_ax1 = tuple(A_shared.op.axis)
s[A_shared].compute_at(s[x1_local], x1_local_j_o_o)
A_d_shared = s.cache_read(A, "shared", [x2_local])
A_d_shared_ax0, A_d_shared_ax1 = tuple(A_d_shared.op.axis)
s[A_d_shared].compute_at(s[x2_local], x2_local_k_o_o)
x2_i_o_o_o = s[x2].fuse(x2_i_o_o_o)
s[x2].bind(x2_i_o_o_o, te.thread_axis("blockIdx.x"))
x2_i_o_o_i = s[x2].fuse(x2_i_o_o_i)
s[x2].bind(x2_i_o_o_i, te.thread_axis("vthread"))
x2_i_o_i = s[x2].fuse(x2_i_o_i)
s[x2].bind(x2_i_o_i, te.thread_axis("threadIdx.x"))
y_2_shared_ax0 = s[y_2_shared].fuse(y_2_shared_ax0)
y_2_shared_ax0_o, y_2_shared_ax0_i = s[y_2_shared].split(y_2_shared_ax0, factor=2)
s[y_2_shared].vectorize(y_2_shared_ax0_i)
y_2_shared_ax0_o_o, y_2_shared_ax0_o_i = s[y_2_shared].split(y_2_shared_ax0_o, factor=64)
s[y_2_shared].bind(y_2_shared_ax0_o_i, te.thread_axis("threadIdx.x"))
x1_i_o_o_o = s[x1].fuse(x1_i_o_o_o)
s[x1].bind(x1_i_o_o_o, te.thread_axis("blockIdx.x"))
x1_i_o_o_i = s[x1].fuse(x1_i_o_o_i)
s[x1].bind(x1_i_o_o_i, te.thread_axis("vthread"))
x1_i_o_i = s[x1].fuse(x1_i_o_i)
s[x1].bind(x1_i_o_i, te.thread_axis("threadIdx.x"))
y_1_shared_ax0 = s[y_1_shared].fuse(y_1_shared_ax0)
y_1_shared_ax0_o, y_1_shared_ax0_i = s[y_1_shared].split(y_1_shared_ax0, factor=4)
s[y_1_shared].vectorize(y_1_shared_ax0_i)
y_1_shared_ax0_o_o, y_1_shared_ax0_o_i = s[y_1_shared].split(y_1_shared_ax0_o, factor=64)
s[y_1_shared].bind(y_1_shared_ax0_o_i, te.thread_axis("threadIdx.x"))
A_shared_ax0_ax1_fused = s[A_shared].fuse(A_shared_ax0, A_shared_ax1)
A_shared_ax0_ax1_fused_o, A_shared_ax0_ax1_fused_i = s[A_shared].split(A_shared_ax0_ax1_fused, factor=4)
s[A_shared].vectorize(A_shared_ax0_ax1_fused_i)
A_shared_ax0_ax1_fused_o_o, A_shared_ax0_ax1_fused_o_i = s[A_shared].split(A_shared_ax0_ax1_fused_o, factor=64)
s[A_shared].bind(A_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
A_d_shared_ax0_ax1_fused = s[A_d_shared].fuse(A_d_shared_ax0, A_d_shared_ax1)
A_d_shared_ax0_ax1_fused_o, A_d_shared_ax0_ax1_fused_i = s[A_d_shared].split(A_d_shared_ax0_ax1_fused, factor=4)
s[A_d_shared].vectorize(A_d_shared_ax0_ax1_fused_i)
A_d_shared_ax0_ax1_fused_o_o, A_d_shared_ax0_ax1_fused_o_i = s[A_d_shared].split(A_d_shared_ax0_ax1_fused_o, factor=64)
s[A_d_shared].bind(A_d_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
s[x1_local].pragma(x1_local_i_c_o_o_o_o, "auto_unroll_max_step", 0)
s[x1_local].pragma(x1_local_i_c_o_o_o_o, "unroll_explicit", True)
s[x2_local].pragma(x2_local_i_c_o_o_o_o, "auto_unroll_max_step", 512)
s[x2_local].pragma(x2_local_i_c_o_o_o_o, "unroll_explicit", True)