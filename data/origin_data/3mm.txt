pluto_tile_parallel:
1.4904129190


default tvm:
Execution time of this operator: max:3.9563099964 s   median:3.8983805193 s   min:3.8822077141 s



default ansor:
Execution time of this operator: max:0.0267695088 s   median:0.0259890132 s   min:0.0232348935 s
Equivalent python schedule:
compute_i, compute_j, compute_k = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
compute_i, compute_j, compute_t = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
compute_i, compute_j, compute_x = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
compute_i_o_i, compute_i_i = s[compute].split(compute_i, factor=2)
compute_i_o_o_i, compute_i_o_i = s[compute].split(compute_i_o_i, factor=4)
compute_i_o_o_o, compute_i_o_o_i = s[compute].split(compute_i_o_o_i, factor=2)
compute_j_o_i, compute_j_i = s[compute].split(compute_j, factor=16)
compute_j_o_o_i, compute_j_o_i = s[compute].split(compute_j_o_i, factor=1)
compute_j_o_o_o, compute_j_o_o_i = s[compute].split(compute_j_o_o_i, factor=2)
compute_x_o, compute_x_i = s[compute].split(compute_x, factor=2)
s[compute].reorder(compute_i_o_o_o, compute_j_o_o_o, compute_i_o_o_i, compute_j_o_o_i, compute_x_o, compute_i_o_i, compute_j_o_i, compute_x_i, compute_i_i, compute_j_i)
compute_local, = s.cache_write([compute], "local")
compute_local_i_c, compute_local_j_c, compute_local_t = tuple(compute_local.op.axis) + tuple(compute_local.op.reduce_axis)
compute_local_i_c_o_i, compute_local_i_c_i = s[compute_local].split(compute_local_i_c, factor=16)
compute_local_i_c_o_o_i, compute_local_i_c_o_i = s[compute_local].split(compute_local_i_c_o_i, factor=1)
compute_local_i_c_o_o_o, compute_local_i_c_o_o_i = s[compute_local].split(compute_local_i_c_o_o_i, factor=8)
compute_local_j_c_o_i, compute_local_j_c_i = s[compute_local].split(compute_local_j_c, factor=16)
compute_local_j_c_o_o_i, compute_local_j_c_o_i = s[compute_local].split(compute_local_j_c_o_i, factor=8)
compute_local_j_c_o_o_o, compute_local_j_c_o_o_i = s[compute_local].split(compute_local_j_c_o_o_i, factor=4)
compute_local_t_o, compute_local_t_i = s[compute_local].split(compute_local_t, factor=32)
s[compute_local].reorder(compute_local_i_c_o_o_o, compute_local_j_c_o_o_o, compute_local_i_c_o_o_i, compute_local_j_c_o_o_i, compute_local_t_o, compute_local_i_c_o_i, compute_local_j_c_o_i, compute_local_t_i, compute_local_i_c_i, compute_local_j_c_i)
compute_i_o_i, compute_i_i = s[compute].split(compute_i, factor=16)
compute_i_o_o, compute_i_o_i = s[compute].split(compute_i_o_i, factor=8)
compute_j_o_i, compute_j_i = s[compute].split(compute_j, factor=128)
compute_j_o_o, compute_j_o_i = s[compute].split(compute_j_o_i, factor=4)
s[compute].reorder(compute_i_o_o, compute_j_o_o, compute_i_o_i, compute_j_o_i, compute_i_i, compute_j_i)
s[compute_local].compute_at(s[compute], compute_j_o_i)
compute_local, = s.cache_write([compute], "local")
compute_local_i_c, compute_local_j_c, compute_local_k = tuple(compute_local.op.axis) + tuple(compute_local.op.reduce_axis)
compute_local_i_c_o_i, compute_local_i_c_i = s[compute_local].split(compute_local_i_c, factor=2)
compute_local_i_c_o_o_i, compute_local_i_c_o_i = s[compute_local].split(compute_local_i_c_o_i, factor=32)
compute_local_i_c_o_o_o, compute_local_i_c_o_o_i = s[compute_local].split(compute_local_i_c_o_o_i, factor=2)
compute_local_j_c_o_i, compute_local_j_c_i = s[compute_local].split(compute_local_j_c, factor=1)
compute_local_j_c_o_o_i, compute_local_j_c_o_i = s[compute_local].split(compute_local_j_c_o_i, factor=256)
compute_local_j_c_o_o_o, compute_local_j_c_o_o_i = s[compute_local].split(compute_local_j_c_o_o_i, factor=4)
compute_local_k_o, compute_local_k_i = s[compute_local].split(compute_local_k, factor=2)
s[compute_local].reorder(compExecution time of this operator: max:3.9563099964 s   median:3.8983805193 s   min:3.8822077141 si_o_j_o_fused)
compute_i_o_o_j_o_o_fused_i_o_i_fused_j_o_i_fused = s[compute].fuse(compute_i_o_o, compute_j_o_o, compute_i_o_i, compute_j_o_i)
s[compute].parallel(compute_i_o_o_j_o_o_fused_i_o_i_fused_j_o_i_fused)
compute_i_o_o_o_j_o_o_o_fused = s[compute].fuse(compute_i_o_o_o, compute_j_o_o_o)
s[compute].parallel(compute_i_o_o_o_j_o_o_o_fused)
s[compute_local].pragma(compute_local_i_c_o_o_o, "auto_unroll_max_step", 16)
s[compute_local].pragma(compute_local_i_c_o_o_o, "unroll_explicit", True)
s[compute_local].pragma(compute_local_i_c_o_o_o, "auto_unroll_max_step", 64)
s[compute_local].pragma(compute_local_i_c_o_o_o, "unroll_explicit", True)
s[compute].pragma(compute_i_o_o_o_j_o_o_o_fused, "auto_unroll_max_step", 512)
s[compute].pragma(compute_i_o_o_o_j_o_o_o_fused, "unroll_explicit", True)
s[compute_local].vectorize(compute_local_j_c_i)
s[compute_local].vectorize(compute_local_j_c_i)
s[compute].vectorize(compute_j_i)


ppcg cuda:
0.0091857919



gpu ansor :
Execution time of this operator: max:0.0061635329 s   median:0.0060886795 s   min:0.0060311863 s
Equivalent python schedule:
compute_i, compute_j, compute_k = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
compute_i, compute_j, compute_t = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
compute_i, compute_j, compute_x = tuple(compute.op.axis) + tuple(compute.op.reduce_axis)
compute_local, = s.cache_write([compute], "local")
compute_local_i_c, compute_local_j_c, compute_local_x = tuple(compute_local.op.axis) + tuple(compute_local.op.reduce_axis)
compute_local_i_c_o_i, compute_local_i_c_i = s[compute_local].split(compute_local_i_c, factor=1)
compute_local_i_c_o_o_i, compute_local_i_c_o_i = s[compute_local].split(compute_local_i_c_o_i, factor=4)
compute_local_i_c_o_o_o_i, compute_local_i_c_o_o_i = s[compute_local].split(compute_local_i_c_o_o_i, factor=64)
compute_local_i_c_o_o_o_o, compute_local_i_c_o_o_o_i = s[compute_local].split(compute_local_i_c_o_o_o_i, factor=1)
compute_local_j_c_o_i, compute_local_j_c_i = s[compute_local].split(compute_local_j_c, factor=2)
compute_local_j_c_o_o_i, compute_local_j_c_o_i = s[compute_local].split(compute_local_j_c_o_i, factor=4)
compute_local_j_c_o_o_o_i, compute_local_j_c_o_o_i = s[compute_local].split(compute_local_j_c_o_o_i, factor=4)
compute_local_j_c_o_o_o_o, compute_local_j_c_o_o_o_i = s[compute_local].split(compute_local_j_c_o_o_o_i, factor=8)
compute_local_x_o_i, compute_local_x_i = s[compute_local].split(compute_local_x, factor=1)
compute_local_x_o_o, compute_local_x_o_i = s[compute_local].split(compute_local_x_o_i, factor=4)
s[compute_local].reorder(compute_local_i_c_o_o_o_o, compute_local_j_c_o_o_o_o, compute_local_i_c_o_o_o_i, compute_local_j_c_o_o_o_i, compute_local_i_c_o_o_i, compute_local_j_c_o_o_i, compute_local_x_o_o, compute_local_x_o_i, compute_local_i_c_o_i, compute_local_j_c_o_i, compute_local_x_i, compute_local_i_c_i, compute_local_j_c_i)
compute_i_o_i, compute_i_i = s[compute].split(compute_i, factor=4)
compute_i_o_o_i, compute_i_o_i = s[compute].split(compute_i_o_i, factor=64)
compute_i_o_o_o, compute_i_o_o_i = s[compute].split(compute_i_o_o_i, factor=1)
compute_j_o_i, compute_j_i = s[compute].split(compute_j, factor=8)
compute_j_o_o_i, compute_j_o_i = s[compute].split(compute_j_o_i, factor=4)
compute_j_o_o_o, compute_j_o_o_i = s[compute].split(compute_j_o_o_i, factor=8)
s[compute].reorder(compute_i_o_o_o, compute_j_o_o_o, compute_i_o_o_i, compute_j_o_o_i, compute_i_o_i, compute_j_o_i, compute_i_i, compute_j_i)
s[compute_local].compute_at(s[compute], compute_j_o_i)
compute_shared = s.cache_read(compute, "shared", [compute_local])
compute_shared_ax0, compute_shared_ax1 = tuple(compute_shared.op.axis)
s[compute_shared].compute_at(s[compute_local], compute_local_x_o_o)
compute_local, = s.cache_write([compute], "local")
compute_local_i_c, compute_local_j_c, compute_local_t = tuple(compute_local.op.axis) + tuple(compute_local.op.reduce_axis)
compute_local_i_c_o_i, compute_local_i_c_i = s[compute_local].split(compute_local_i_c, factor=16)
compute_local_i_c_o_o_i, compute_local_i_c_o_i = s[compute_local].split(compute_local_i_c_o_i, factor=1)
compute_local_i_c_o_o_o_i, compute_local_i_c_o_o_i = s[compute_local].split(compute_local_i_c_o_o_i, factor=16)
compute_local_i_c_o_o_o_o, compute_local_i_c_o_o_o_i = s[compute_local].split(compute_local_i_c_o_o_o_i, factor=2)
compute_local_j_c_o_i, compute_local_j_c_i = s[compute_local].split(compute_local_j_c, factor=2)
compute_local_j_c_o_o_i, compute_local_j_c_o_i = s[compute_local].split(compute_local_j_c_o_i, factor=1)
compute_local_j_c_o_o_o_i, compute_local_j_c_o_o_i = s[compute_local].split(compute_local_j_c_o_o_i, factor=8)
compute_local_j_c_o_o_o_o, compute_local_j_c_o_o_o_i = s[compute_local].split(compute_local_j_c_o_o_o_i, factor=2)
compute_local_t_o_i, compute_local_t_i = s[compute_local].split(compute_local_t, factor=4)
compute_local_t_o_o, compute_local_t_o_i = s[compute_local].split(compute_local_t_o_i, factor=4)
s[compute_local].reorder(compute_local_i_c_o_o_o_o, compute_local_j_c_o_o_o_o, compute_local_i_c_o_o_o_i, compute_local_j_c_o_o_o_i, compute_local_i_c_o_o_i, compute_local_j_c_o_o_i, compute_local_t_o_o, compute_local_t_o_i, compute_local_i_c_o_i, compute_local_j_c_o_i, compute_local_t_i, compute_local_i_c_i, compute_local_j_c_i)
compute_i_o_i, compute_i_i = s[compute].split(compute_i, factor=16)
compute_i_o_o_i, compute_i_o_i = s[compute].split(compute_i_o_i, factor=16)
compute_i_o_o_o, compute_i_o_o_i = s[compute].split(compute_i_o_o_i, factor=2)
compute_j_o_i, compute_j_i = s[compute].split(compute_j, factor=2)
compute_j_o_o_i, compute_j_o_i = s[compute].split(compute_j_o_i, factor=8)
compute_j_o_o_o, compute_j_o_o_i = s[compute].split(compute_j_o_o_i, factor=2)
s[compute].reorder(compute_i_o_o_o, compute_j_o_o_o, compute_i_o_o_i, compute_j_o_o_i, compute_i_o_i, compute_j_o_i, compute_i_i, compute_j_i)
s[compute_local].compute_at(s[compute], compute_j_o_i)
D_shared = s.cache_read(D, "shared", [compute_local])
D_shared_ax0, D_shared_ax1 = tuple(D_shared.op.axis)
s[D_shared].compute_at(s[compute_local], compute_local_t_o_o)
C_shared = s.cache_read(C, "shared", [compute_local])
C_shared_ax0, C_shared_ax1 = tuple(C_shared.op.axis)
s[C_shared].compute_at(s[compute_local], compute_local_t_o_o)
compute_d_shared = s.cache_read(compute, "shared", [compute_local])
compute_d_shared_ax0, compute_d_shared_ax1 = tuple(compute_d_shared.op.axis)
s[compute_d_shared].compute_at(s[compute_local], compute_local_x_o_o)
compute_local, = s.cache_write([compute], "local")
compute_local_i_c, compute_local_j_c, compute_local_k = tuple(compute_local.op.axis) + tuple(compute_local.op.reduce_axis)
compute_local_i_c_o_i, compute_local_i_c_i = s[compute_local].split(compute_local_i_c, factor=1)
compute_local_i_c_o_o_i, compute_local_i_c_o_i = s[compute_local].split(compute_local_i_c_o_i, factor=2)
compute_local_i_c_o_o_o_i, compute_local_i_c_o_o_i = s[compute_local].split(compute_local_i_c_o_o_i, factor=16)
compute_local_i_c_o_o_o_o, compute_local_i_c_o_o_o_i = s[compute_local].split(compute_local_i_c_o_o_o_i, factor=2)
compute_local_j_c_o_i, compute_local_j_c_i = s[compute_local].split(compute_local_j_c, factor=2)
compute_local_j_c_o_o_i, compute_local_j_c_o_i = s[compute_local].split(compute_local_j_c_o_i, factor=4)
compute_local_j_c_o_o_o_i, compute_local_j_c_o_o_i = s[compute_local].split(compute_local_j_c_o_o_i, factor=4)
compute_local_j_c_o_o_o_o, compute_local_j_c_o_o_o_i = s[compute_local].split(compute_local_j_c_o_o_o_i, factor=2)
compute_local_k_o_i, compute_local_k_i = s[compute_local].split(compute_local_k, factor=32)
compute_local_k_o_o, compute_local_k_o_i = s[compute_local].split(compute_local_k_o_i, factor=2)
s[compute_local].reorder(compute_local_i_c_o_o_o_o, compute_local_j_c_o_o_o_o, compute_local_i_c_o_o_o_i, compute_local_j_c_o_o_o_i, compute_local_i_c_o_o_i, compute_local_j_c_o_o_i, compute_local_k_o_o, compute_local_k_o_i, compute_local_i_c_o_i, compute_local_j_c_o_i, compute_local_k_i, compute_local_i_c_i, compute_local_j_c_i)
compute_i_o_i, compute_i_i = s[compute].split(compute_i, factor=2)
compute_i_o_o_i, compute_i_o_i = s[compute].split(compute_i_o_i, factor=16)
compute_i_o_o_o, compute_i_o_o_i = s[compute].split(compute_i_o_o_i, factor=2)
compute_j_o_i, compute_j_i = s[compute].split(compute_j, factor=8)
compute_j_o_o_i, compute_j_o_i = s[compute].split(compute_j_o_i, factor=4)
compute_j_o_o_o, compute_j_o_o_i = s[compute].split(compute_j_o_o_i, factor=2)
s[compute].reorder(compute_i_o_o_o, compute_j_o_o_o, compute_i_o_o_i, compute_j_o_o_i, compute_i_o_i, compute_j_o_i, compute_i_i, compute_j_i)
s[compute_local].compute_at(s[compute], compute_j_o_i)
B_shared = s.cache_read(B, "shared", [compute_local])
B_shared_ax0, B_shared_ax1 = tuple(B_shared.op.axis)
s[B_shared].compute_at(s[compute_local], compute_local_k_o_o)
A_shared = s.cache_read(A, "shared", [compute_local])
A_shared_ax0, A_shared_ax1 = tuple(A_shared.op.axis)
s[A_shared].compute_at(s[compute_local], compute_local_k_o_o)
compute_i_o_o_o_j_o_o_o_fused = s[compute].fuse(compute_i_o_o_o, compute_j_o_o_o)
s[compute].bind(compute_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
compute_i_o_o_i_j_o_o_i_fused = s[compute].fuse(compute_i_o_o_i, compute_j_o_o_i)
s[compute].bind(compute_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
compute_i_o_i_j_o_i_fused = s[compute].fuse(compute_i_o_i, compute_j_o_i)
s[compute].bind(compute_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
compute_shared_ax0_ax1_fused = s[compute_shared].fuse(compute_shared_ax0, compute_shared_ax1)
compute_shared_ax0_ax1_fused_o, compute_shared_ax0_ax1_fused_i = s[compute_shared].split(compute_shared_ax0_ax1_fused, factor=2)
s[compute_shared].vectorize(compute_shared_ax0_ax1_fused_i)
compute_shared_ax0_ax1_fused_o_o, compute_shared_ax0_ax1_fused_o_i = s[compute_shared].split(compute_shared_ax0_ax1_fused_o, factor=256)
s[compute_shared].bind(compute_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
compute_i_o_o_o_j_o_o_o_fused = s[compute].fuse(compute_i_o_o_o, compute_j_o_o_o)
s[compute].bind(compute_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
compute_i_o_o_i_j_o_o_i_fused = s[compute].fuse(compute_i_o_o_i, compute_j_o_o_i)
s[compute].bind(compute_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
compute_i_o_i_j_o_i_fused = s[compute].fuse(compute_i_o_i, compute_j_o_i)
s[compute].bind(compute_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
D_shared_ax0_ax1_fused = s[D_shared].fuse(D_shared_ax0, D_shared_ax1)
D_shared_ax0_ax1_fused_o, D_shared_ax0_ax1_fused_i = s[D_shared].split(D_shared_ax0_ax1_fused, factor=1)
s[D_shared].vectorize(D_shared_ax0_ax1_fused_i)
D_shared_ax0_ax1_fused_o_o, D_shared_ax0_ax1_fused_o_i = s[D_shared].split(D_shared_ax0_ax1_fused_o, factor=128)
s[D_shared].bind(D_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
C_shared_ax0_ax1_fused = s[C_shared].fuse(C_shared_ax0, C_shared_ax1)
C_shared_ax0_ax1_fused_o, C_shared_ax0_ax1_fused_i = s[C_shared].split(C_shared_ax0_ax1_fused, factor=1)
s[C_shared].vectorize(C_shared_ax0_ax1_fused_i)
C_shared_ax0_ax1_fused_o_o, C_shared_ax0_ax1_fused_o_i = s[C_shared].split(C_shared_ax0_ax1_fused_o, factor=128)
s[C_shared].bind(C_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
compute_d_shared_ax0_ax1_fused = s[compute_d_shared].fuse(compute_d_shared_ax0, compute_d_shared_ax1)
compute_d_shared_ax0_ax1_fused_o, compute_d_shared_ax0_ax1_fused_i = s[compute_d_shared].split(compute_d_shared_ax0_ax1_fused, factor=1)
s[compute_d_shared].vectorize(compute_d_shared_ax0_ax1_fused_i)
compute_d_shared_ax0_ax1_fused_o_o, compute_d_shared_ax0_ax1_fused_o_i = s[compute_d_shared].split(compute_d_shared_ax0_ax1_fused_o, factor=256)
s[compute_d_shared].bind(compute_d_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
compute_i_o_o_o_j_o_o_o_fused = s[compute].fuse(compute_i_o_o_o, compute_j_o_o_o)
s[compute].bind(compute_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
compute_i_o_o_i_j_o_o_i_fused = s[compute].fuse(compute_i_o_o_i, compute_j_o_o_i)
s[compute].bind(compute_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
compute_i_o_i_j_o_i_fused = s[compute].fuse(compute_i_o_i, compute_j_o_i)
s[compute].bind(compute_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
B_shared_ax0_ax1_fused = s[B_shared].fuse(B_shared_ax0, B_shared_ax1)
B_shared_ax0_ax1_fused_o, B_shared_ax0_ax1_fused_i = s[B_shared].split(B_shared_ax0_ax1_fused, factor=1)
s[B_shared].vectorize(B_shared_ax0_ax1_fused_i)
B_shared_ax0_ax1_fused_o_o, B_shared_ax0_ax1_fused_o_i = s[B_shared].split(B_shared_ax0_ax1_fused_o, factor=64)
s[B_shared].bind(B_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
A_shared_ax0_ax1_fused = s[A_shared].fuse(A_shared_ax0, A_shared_ax1)
A_shared_ax0_ax1_fused_o, A_shared_ax0_ax1_fused_i = s[A_shared].split(A_shared_ax0_ax1_fused, factor=1)
s[A_shared].vectorize(A_shared_ax0_ax1_fused_i)
A_shared_ax0_ax1_fused_o_o, A_shared_ax0_ax1_fused_o_i = s[A_shared].split(A_shared_ax0_ax1_fused_o, factor=64)
s[A_shared].bind(A_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
s[compute_local].pragma(compute_local_i_c_o_o_o_o, "auto_unroll_max_step", 512)
s[compute_local].pragma(compute_local_i_c_o_o_o_o, "unroll_explicit", True)
s[compute_local].pragma(compute_local_i_c_o_o_o_o, "auto_unroll_max_step", 512)
s[compute_local].pragma(compute_local_i_c_o_o_o_o, "unroll_explicit", True)
s[compute_local].pragma(compute_local_i_c_o_o_o_o, "auto_unroll_max_step", 1024)
s[compute_local].pragma(compute_local_i_c_o_o_o_o, "unroll_explicit", True)

